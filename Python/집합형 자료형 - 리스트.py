'''
# 리스트의 필요성
# 학생이 10명이 있고 이들의 평균 성적을 계산한다고 가정
# 변수 10개를 사용해서 10명의 성적 입력 받고 더해서 평균 구하기.
# 만약 1000명의 성적 평균을 낸다면?
# 이런 경우에 사용하는 것이 리스트

# 리스트
# 순서가 지정된 요소 모음을 저장하는 자료구조
# 여러 개의 데이터를 한꺼번에 저장하고 처리 할 수 있다.
# 형식 : 리스트 이름 =[요소1,요소2,....,요소n]

# 리스트 선언
score = [100,80,95,90,70]
print(score)
#[100, 80, 95, 90, 70]

# 시퀀스 자료형
# 시퀀스 : 순서를 가지고 연속적으로 구성된 자료형
# 공통점
# 요소들이 순서를 가지고 있다.
# 요소들은 요소 번호(index)를 사용하여 참조할 수 있다.
# 공통의 연산, 함수를 사용할 수 있다.

# 리스트 인덱싱
# 리스트 요소
# 리스트는 요소 번호로 데이터를 관리
# 인덱스는 0번부터 시작한다.
# 없는 인덱스에 접근하면 에러
# 요소 개수가 n개면 마지막 인덱스가 n-1
# print(score[5]) 에러남.
# 요소에 데이터 타입 제한이 없다.
# 파이썬 리스트는 다른 언어의 배열과 달리 저장하는 데이터 타입 제한이 없음. 여러가지 혼용 가능.
a = []                      # 비어있는 리스트
b = [1,2,3]                 # 정수 리스트
c = ['abc', 'def', '가나다'] # 문자열 리스트
d = [3.14, 55, 'Hello']     # 혼용 가능

# 요소 끼리 연산도 가능
d = [3.14, 55, 'Hello']
print(d[0] + d[1])
#58.14

# 연산이 가능한 경우에만 가능
# print(d[1] + d[2]) 에러.

# 음수 인덱싱도 가능
print(d[-1])
#Hello
print(d[2])
#Hello

# 성적의 합계와 평균 출력
score = [100, 80, 95, 90, 70]
sum = score[0] + score[1] + score[2] + score[3] + score[4]
print("성적 합계:",sum)
#성적 합계: 435
print("평균 합계:",sum / 5)
#평균 합계: 87.0

# for문과 같이 사용하기
score = [100, 80, 95, 90, 70]
sum = 0
for i in range(5) :
    sum += score[i]
print("성적 합계:",sum)
#성적 합계: 435
print("평균 합계:",sum / 5)
#평균 합계: 87.0

# 리스트 슬라이싱
# 특정 범위를 정해서 추출해 내어 새로운 리스트로 만든다.
# 형식: 리스트 이름[시작인덱스 : 종료인덱스 : step]
# step은 생략할 수 있다. 
# 종료인덱스의 요소는 포함하지 않고 바로 앞 요소까지
# 생략하면
# 리스트이름[시작인덱스 : ] -> 시작인덱스 부터 끝까지
# 리스트이름[ : 종료인덱스 ] -> 처음부터 종료 인덱스 까지
score = [100, 80, 95, 90, 70]
print(score[2:4])
#[95, 90]
print(score[:2])
#[100, 80]
print(score[2:])
#[95, 90, 70]

# 리스트 요소값 수정
# 리스트는 요소의 값을 수정할 수 있다.
# 해당 요소를 일반 변수처럼 수정할 수 있다.
# 리스트는 되는데 튜플은 요소값 변경이 안됨
score = [100, 80, 95, 90, 70]
score[2] = 50
print(score)
#[100, 80, 50, 90, 70]

# 리스트 연산
# 덧셈 연산자
# 두 리스트를 연결하여 새로운 리스트를 생성
a = [101,102,103]
b = [201,202,203]
print(a + b)
#[101, 102, 103, 201, 202, 203]

# 곱셈 연산자
# 리스트 요소를 반복해서 새로운 리스트를 생성
print(a * 2)
#[101, 102, 103, 101, 102, 103]

# 비교 연산자 (==, !=, <, >)
# ==, != : 두 리스트가 모든 요소가 같은 지, 다른지 결과 반환
# <,> : 두 리스트를 사전 순으로 비교하여 결과 반환
c = [10,20,30]
d = [10,20,30,40]
e = [10,20,30]
print(c == e)
#True
print(c != d)
#True
print(c > d)
#False
print(c < d)
#True

# 리스트에 사용 가능한 내장함수
# len() : 리스트의 길이
score = [100, 80, 95, 90, 70]
print(len(score))
#5

# sum() : 리스트 요소의 합
score = [100, 80, 95, 90, 70]
print(sum(score))
#435
print(sum(score) / len(score)) # 평균 구하기
#87.0

# max() : 리스트 요소 중 최대값 반환
score = [100, 80, 95, 90, 70]
print(max(score))
#100

# min() : 리스트 요소 중 최소값 반환
score = [100, 80, 95, 90, 70]
print(min(score))
#70

# list() :
# 시퀀스 자료형(리스트, 튜플, range, 문자열 등)을 리스트로 만들어 줌
a = range(1,5)
print(a)
#range(1, 5)
b = list(range(1,5))
print(b)
#[1, 2, 3, 4]
c = list("test")
print(c)
#['t', 'e', 's', 't']

# 리스트 요소 추가
# 리스트의 요소 추가하기
# 리스트 데이터처리의 가장 대표적인 기능
# append( x ) : 요소 x를 리스트의 끝에 추가
# extend([x1, x2]) : 리스트[x1, x2]를 기존 리스트 뒤에 추가
# insert(index, x) : index 위치에 x를 삽입

# append(요소)
a = [1,2,3]
print(a)
#[1, 2, 3]
a.append(40)
print(a)
#[1, 2, 3, 40]

# 빈 리스트에도 추가 가능
a = []
a.append(10)
print(a)
#[10]

# 리스트 안에 리스트 추가
# append(리스트)
# 리스트 안에 리스트가 들어감 -> 중첩 리스트
# 안에 있는 리스트도 하나의 요소로 봄 -> 길이는 1 증가
a = [1,2,3]
a.append([40,50])
print(a)
#[1, 2, 3, [40, 50]]
print(len(a))
#4

# extend(리스트)
# 여러 요소를 추가하고 싶을 때 append를 여러 번 써도 되지만, 추가할 요소가 많으면 extend() 사용
# 길이는 전달된 리스트 길이 만큼 증가
a = [1,2,3]
a.extend([40,50])
print(a)
#[1, 2, 3, 40, 50]
print(len(a))
#5

# insert(인덱스,요소)
# append,extend는 리스트 끝에 요소를 추가
# 원하는 위치에 요소를 추가하려면 insert() 사용
# 추가하면 그 뒤 요소들은 인덱스가 한 칸씩 뒤로 밀림
a = [1,2,3]
a.insert(2, 100)
print(a)
#[1, 2, 100, 3]
print(len(a))
#4

# insert를 응용해서 제일 처음에 요소 추가
a = [1,2,3]
a.insert(0, 100)
print(a)
#[100, 1, 2, 3]

# 마지막에 요소 추가
a = [1,2,3]
a.insert(len(a), 100)
print(a)
#[1, 2, 3, 100]

# 리스트에서 요소를 삭제하는 방법
# remove( x ) : 요소 x를 찾아서 리스트에서 삭제
# pop(index) : index 위치의 요소를 찾아서 반환 후, 해당 요소를 삭제
# del 명령어

# 리스트 특정 값 삭제
# remove(값)
# 리스트에서 원하는 값을 찾아서 삭제
# 해당 값이 없으면 에러남.
a = [1,2,3]
a.remove(2)
print(a)
#[1, 3]
# a.remove(4) 에러남.

# 리스트에서 해당 값이 두 개 이상 있으면?? 첫번째 값을 삭제 한다
a = [1, 2, 3, 1] 
a.remove(1)
print(a)
#[2, 3, 1]

# 리스트 특정 인덱스 요소 삭제
# pop(인덱스)
# 인덱스 요소를 찾아서 반환한 뒤, 해당 요소를 삭제
a = [1,2,3]
print(a.pop(1))
#2
print(a)
#[1, 3]

# 인덱스를 쓰지 않으면 마지막 요소를 반환하고 삭제함.
print(a.pop())
#3
print(a)
#[1]

# del 
# del를 사용해서 특정 요소를 삭제하는 방법이 있다.
a = [1, 2, 3]
del a[1]
print(a)
#[1, 3]

# 리스트 특정 값의 인덱스 구하기
# index( 값 )
# 리스트 특정 값의 인덱스를 구함
# 같은 값이 두 개 이상이면 첫번째 인덱스 반환
# 없는 값을 넣으면 에러가 난다.
a = [1,2,3,1]
print(a.index(1))
#0
# print(a.index(4)) 에러.

# 리스트 특정 값의 개수
# count(값)
# 특정 값의 개수를 알려준다.
# 없으면 0 반환
a = [1,2,3,1]
print(a.count(1))
#2
print(a.count(4))
#0

# 리스트의 순서 뒤집기
# reverse()
# 리스트에서 요소의 순서를 역순으로 만들어 줌
a = [1,2,3,4,5]
a.reverse()
print(a)
#[5, 4, 3, 2, 1]
'''
# 리스트 요소 정렬
# sort()
# 리스트의 요소를 오름차순으로 정렬
# 내림차순으로하고 싶으면 sort(reverse=True)
a = [3, 2, 6, 4, 1]
a.sort()
print(a)
#[1, 2, 3, 4, 6]
a.sort(reverse=True)
print(a)
#[6, 4, 3, 2, 1]

# 리스트의 모든 요소 삭제
# clear()
# 리스트의 모든 요소를 삭제하고 빈 리스트 []가 됨.
a = [1,2,3]
a.clear()
print(a)
#[]

# 리스트의 복사
# copy()
# 리스트를 복사해서 또 다른 리스트를 만든다.
# 또 다른 리스트 -> 값이 같지만 다른 리스트 (깊은 복사)
a = [1, 2, 3]
b = a.copy()
print(a)
#[1, 2, 3]
print(b)
#[1, 2, 3]
a[1] = 5
print(a)
#[1, 5, 3]
print(b)
#[1, 2, 3]

# 얉은 복사
a = [1, 2, 3]
b = a
print(a)
#[1, 2, 3]
print(b)
#[1, 2, 3]
a[1] = 5
print(a)
#[1, 5, 3]
print(b)
#[1, 5, 3]

# 참조
# 참조위 정확한 이해
# 참조 : 객체가 메모리에 생기면, 그 객체가 어디 있는지 아는 것
# 여기서는 [1,2,3]이라는 리스트 객체가 하나 생기고 변수 a가 그 리스트가 어디 있는지 참조하고 있다.

# 참조 값 복사
# 그 참조 값을 복사하면? 복사된 값도 원래의 같은 객체를 참조하게 됨

# 얇은 복사 이해하기
# 변수 a,b가 이름은 달라도 완전히 같은 객체를 참조
a = [1, 2, 3]
b = a
print(b)
#[1, 2, 3]
[1, 2, 3]
b[0] = 100
print(a)
#[100, 2, 3]
print(b)
#[100, 2, 3]

# 리스트 깊은 복사
# 리스트를 복사해서 또 다른 리스트를 만든다.


# 깊은 복사 이해하기
# 변수 a, b가 이름도 다르고 완전히 다른 객체를 각각 참조  
a = [1,2,3]
b = a.copy()
print(b)
#[1, 2, 3]
b[0] = 100
print(b)
#[100, 2, 3]
print(a)
#[1, 2, 3]

# 다음 같이 크기 5인 리스트에 처음 요소부터 순서대로 0, 1, 2, 3, 4를 하나씩 추가하고, 다음과 같이 출력하는 프로그램을 작성하세요. (for문 사용)
list = []
for i in range(5) :
    list.append(i)
for i in range(5) :
    print("list[%d] = %d" % (i,list[i]))
#list[0] = 0
#list[1] = 1
#list[2] = 2
#list[3] = 3
#list[4] = 4
 
# 이전 문제를 바꾸어, 처음부터 순서대로 5, 4, 3, 2, 1을 추가하고 출력하는 프로그램을 작성하세요. 
list = []
for i in range(5) :
    list.append(5-i)
for i in range(5) :
    print("list[%d] = %d" % (i, list[i]))
#list[0] = 5
#list[1] = 4
#list[2] = 3
#list[3] = 2
#list[4] = 1

# 처음부터 순서대로 0.0, 0.1, … 1.0을 추가하여 표시하는 프로그램을 작성하세요. 
# list[0] = 0.0
# list[1] = 0.1
# list[2] = 0.2
# list[3] = 0.3
# list[4] = 0.4
# list[5] = 0.5
# list[6] = 0.6
# list[7] = 0.7
# list[8] = 0.8
# list[9] = 0.9
# list[10] = 1.0
# list = []
# for i in range(11) :
#     list.append(i/10)
# for i in range(11) :
#     print("list[%d] = %.1f" % (i, list[i]))


# 정수를 10번 입력받아 배열을 만들어라.
list = []
for i in range(10) :
    list.append(int(input("정수를 입력하십시오: ")))
list.sort()
list.reverse()
print(list)

# 동일한 숫자가 몇개씩 있는지 출력하도록 하라.
list.count(i)
for i in range(10) :
    print(list.count(i))